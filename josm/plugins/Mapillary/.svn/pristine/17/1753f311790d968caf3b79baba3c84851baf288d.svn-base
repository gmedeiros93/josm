image: registry.gitlab.com/josm/docker-library/openjdk-8-josmplugin:latest

###############
# Build stage #
###############

assemble:
  stage: build
  script:
  - ./gradlew assemble --stacktrace
  artifacts:
    paths:
    - build/

assemble with java 10:
  stage: build
  image: registry.gitlab.com/josm/docker-library/openjdk-10-josmplugin:latest
  script:
  - ./gradlew assemble --stacktrace
  artifacts:
    paths:
    - build/

assemble with java 11:
  stage: build
  image: registry.gitlab.com/josm/docker-library/openjdk-11-josmplugin:latest
  script:
  - ./gradlew assemble --stacktrace
  artifacts:
    paths:
    - build/

assemble with java 12:
  stage: build
  image: registry.gitlab.com/josm/docker-library/openjdk-12-josmplugin:latest
  script:
  - ./gradlew assemble --stacktrace
  artifacts:
    paths:
    - build/
  allow_failure: true

assemble with java 13:
  stage: build
  image: registry.gitlab.com/josm/docker-library/openjdk-13-josmplugin:latest
  script:
  - ./gradlew assemble --stacktrace
  artifacts:
    paths:
    - build/
  allow_failure: true


##############
# Test stage #
##############

build:
  stage: test
  script:
  - ./gradlew build generatePot --stacktrace
  artifacts:
    paths:
    - build
  dependencies:
  - assemble

compile against min JOSM:
  stage: test
  script:
  - ./gradlew compileJava_minJosm --stacktrace
  dependencies:
  - assemble

compile against latest JOSM:
  stage: test
  script:
  - ./gradlew compileJava_latestJosm --stacktrace
  dependencies:
  - assemble

build with java 10:
  stage: test
  image: registry.gitlab.com/josm/docker-library/openjdk-10-josmplugin:latest
  script:
  - ./gradlew build --stacktrace
  dependencies:
  - assemble with java 10

build with java 11:
  stage: test
  image: registry.gitlab.com/josm/docker-library/openjdk-11-josmplugin:latest
  script:
  - ./gradlew build --stacktrace
  dependencies:
  - assemble with java 11

build with java 12:
  stage: test
  image: registry.gitlab.com/josm/docker-library/openjdk-12-josmplugin:latest
  script:
  - ./gradlew build --stacktrace
  dependencies:
  - assemble with java 12
  allow_failure: true

build with java 13:
  stage: test
  image: registry.gitlab.com/josm/docker-library/openjdk-13-josmplugin:latest
  script:
  - ./gradlew build --stacktrace
  dependencies:
  - assemble with java 13
  allow_failure: true


################
# Deploy stage #
################

transifex.com:
  image: registry.gitlab.com/josm/docker-library/python-transifex:latest
  stage: deploy
  environment:
    name: transifex.com
    url: https://www.transifex.com/josm/josm/josm-plugin_Mapillary/
  script:
  - TX_TOKEN="$TRANSIFEX_TOKEN" tx push -s --no-interactive
  dependencies:
  - build
  only:
    refs:
    - master@JOSM/Mapillary
    variables:
    - $TRANSIFEX_TOKEN

codecov.io:
  image: alpine:3.8
  stage: deploy
  environment:
    name: codecov.io
    url: https://codecov.io/gh/JOSM/Mapillary
  before_script:
  - apk add --update curl bash
  script:
  - curl -s https://codecov.io/bash | bash
  - curl -s https://codecov.io/bash | bash /dev/stdin -c -F model_and_api
  dependencies:
  - build
  only:
    refs:
    - master@JOSM/Mapillary
    variables:
    - $CODECOV_TOKEN

sonarcloud.io:
  image: registry.gitlab.com/josm/docker-library/openjdk-8-josmplugin:latest
  stage: deploy
  environment:
    name: sonarcloud.io
    url: https://sonarcloud.io/dashboard?id=org.openstreetmap.josm.plugins%3AMapillary
  script:
  - ./gradlew -Dsonar.login=$SONAR_TOKEN sonarqube
  dependencies:
  - build
  only:
    refs:
    - master@JOSM/Mapillary
    variables:
    - $SONAR_TOKEN

GitLab Maven repo:
  stage: deploy
  environment:
    name: GitLab Maven Repository for JOSM plugins
    url: https://gitlab.com/JOSM/Mapillary/-/packages
  script:
  - ./gradlew publishMapillaryPublicationToGitlabRepository
  dependencies:
  - build
  only:
    refs:
    - tags@JOSM/Mapillary
    variables:
    - $CI_JOB_TOKEN

release:
  stage: deploy
  environment:
    name: pages branch / dist directory
    url: https://gitlab.com/JOSM/Mapillary/tree/pages/dist
  script:
  - |
    echo "$SSH_PRIVATE_DEPLOY_KEY" > ~/.ssh/id_rsa
    chmod 600 ~/.ssh/id_rsa
    git clone --depth 1 --branch pages git@gitlab.com:JOSM/Mapillary.git pages
  - |
    version=`git describe --always --dirty`
    longVersion=`git describe --always --long --dirty`
    commitMessage="Release version $longVersion"
  - |
    mkdir -pv "pages/dist/$version"
    cp -v build/dist/* build/tmp/jar/MANIFEST.MF "pages/dist/$version"
    rm -fv "pages/dist/latest"
    ln -s "./$version" "pages/dist/latest"
  - |
    cd pages/
    git config user.name "GitLab CI for JOSM/Mapillary"
    git config user.email "incoming+JOSM/Mapillary@incoming.gitlab.com"
    git stage .
    git commit -a -m "$commitMessage"
    git push origin pages
  dependencies:
  - build
  only:
    refs:
    - tags@JOSM/Mapillary
    variables:
    - $SSH_PRIVATE_DEPLOY_KEY
